// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                    String   @id @default(cuid())
  name                  String
  url                   String?
  logo                  String?
  domain                String?  @unique
  
  // LinkedIn enrichment data
  linkedinUrl           String?
  linkedinSlug          String?  @unique
  linkedinEmployees     Int?
  linkedinSize          String?
  linkedinIndustry      String?
  linkedinType          String?
  linkedinFoundedDate   String?
  linkedinFollowers     Int?
  linkedinHeadquarters  String?
  linkedinSpecialties   String[]
  linkedinLocations     String[]
  linkedinDescription   String?  @db.Text
  linkedinSlogan        String?
  linkedinRecruitmentAgency Boolean?
  
  // Relations
  jobs                  Job[]
  jobBoards            JobBoardOrganization[]
  
  // Metadata
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model Job {
  id                    String   @id @default(cuid())
  externalId           String   @unique
  datePosted           DateTime
  dateCreated          DateTime
  dateValidThrough     DateTime?
  title                String
  
  // Organization relation
  organizationId       String
  organization         Organization @relation(fields: [organizationId], references: [id])
  
  // Location data
  locationsRaw         Json?
  cities               String[]
  counties             String[]
  regions              String[]
  countries            String[]
  locationsFull        String[]
  timezones            String[]
  latitude             Float[]
  longitude            Float[]
  isRemote             Boolean  @default(false)
  
  // Job details
  employmentType       String[]
  salaryRaw            Json?
  url                  String
  descriptionText      String   @db.Text
  
  // Source tracking
  sourceType           String?
  source               String?
  sourceDomain         String?
  
  // AI-powered analysis fields
  aiSalaryCurrency             String?
  aiSalaryValue                Float?
  aiSalaryMinValue             Float?
  aiSalaryMaxValue             Float?
  aiSalaryUnitText             String?
  aiBenefits                   String[]
  aiExperienceLevel            String?
  aiWorkArrangement            String?
  aiWorkArrangementOfficeDays  Int?
  aiRemoteLocation             String[]
  aiRemoteLocationDerived      String[]
  aiKeySkills                  String[]
  aiCoreResponsibilities       String?  @db.Text
  aiRequirementsSummary        String?  @db.Text
  aiHiringManagerName          String?
  aiHiringManagerEmailAddress  String?
  aiWorkingHours               Int?
  aiEmploymentType             String[]
  aiJobLanguage                String?
  aiVisaSponsorship            Boolean?
  
  // Relations
  jobBoards            JobBoardJob[]
  
  // Metadata
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  lastFetchedAt        DateTime?
  expiredAt            DateTime?
}

model SavedQuery {
  id            String   @id @default(cuid())
  name          String
  description   String?
  parameters    Json     // API query parameters
  lastRun       DateTime?
  resultCount   Int?
  schedule      String?  // cron expression for auto-run
  isActive      Boolean  @default(true)
  createdBy     String
  user          User     @relation(fields: [createdBy], references: [id])
  fetchLogs     FetchLog[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model FetchLog {
  id            String      @id @default(cuid())
  status        String      // success, error, partial
  jobsFetched   Int         @default(0)
  jobsCreated   Int         @default(0)
  jobsUpdated   Int         @default(0)
  orgsCreated   Int         @default(0)
  orgsUpdated   Int         @default(0)
  parameters    Json
  savedQueryId  String?
  savedQuery    SavedQuery? @relation(fields: [savedQueryId], references: [id])
  errorMessage  String?
  duration      Int?        // milliseconds
  createdAt     DateTime    @default(now())
}

// Admin model deprecated - using User model with isAdmin flag instead

// Better Auth Models
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified Boolean   @default(false)
  name          String?
  image         String?
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  sessions      Session[]
  accounts      Account[]
  savedQueries  SavedQuery[]
  apiTokens     ApiToken[]
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  accountId         String
  providerId        String
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken       String?  @db.Text
  refreshToken      String?  @db.Text
  idToken           String?  @db.Text
  accessTokenExpiresAt DateTime?
  refreshTokenExpiresAt DateTime?
  scope             String?
  password          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@unique([providerId, accountId])
}

model ApiToken {
  id          String    @id @default(cuid())
  name        String
  token       String    @unique
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([token])
  @@index([userId])
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([identifier, value])
}

// Job Board Models
model JobBoard {
  id          String   @id @default(cuid())
  slug        String   @unique // URL-friendly identifier (e.g., "tech-jobs", "remote-work")
  name        String   // Display name (e.g., "Tech Jobs", "Remote Work")
  description String?  @db.Text
  isActive    Boolean  @default(true)
  
  // Customization
  logo        String?
  primaryColor String? // Hex color for theming
  domain      String?  // Custom domain if applicable
  
  // Relations
  jobs        JobBoardJob[]
  organizations JobBoardOrganization[]
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Join table for many-to-many relationship between JobBoard and Job
model JobBoardJob {
  id          String   @id @default(cuid())
  jobBoardId  String
  jobBoard    JobBoard @relation(fields: [jobBoardId], references: [id], onDelete: Cascade)
  jobId       String
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  // Additional metadata for the relationship
  featured    Boolean  @default(false) // Whether this job is featured on this board
  pinnedUntil DateTime? // If the job should be pinned to the top
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([jobBoardId, jobId])
  @@index([jobBoardId])
  @@index([jobId])
}

// Join table for many-to-many relationship between JobBoard and Organization
model JobBoardOrganization {
  id             String       @id @default(cuid())
  jobBoardId     String
  jobBoard       JobBoard     @relation(fields: [jobBoardId], references: [id], onDelete: Cascade)
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  // Additional metadata for the relationship
  isFeatured     Boolean      @default(false) // Whether this org is featured on this board
  tier           String?      // e.g., "premium", "standard", "basic"
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  @@unique([jobBoardId, organizationId])
  @@index([jobBoardId])
  @@index([organizationId])
}
